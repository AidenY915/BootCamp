import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;
import java.awt.Point;

class Main{
	public static void mazeRun(byte[][] map, Point p) {		//비재귀형 DFS 만들어보기
		Stack<Point> stack = new Stack<Point>();
		int y = 0, x = 0;
		stack.add(new Point(x, y));
		while(true) {
			Point now = stack.pop();
			Point prev = null;
			if(!stack.isEmpty())
				Point prev = stack.peek();
			Point next = new Point(x,y+1);
			if(!prev.equals(next)) {
				while(true) {
					stack.add(new Point(x,y));
					if(y <= map.length && map[y+1][x] == 1) y++;
					else break;
				}
			}
			next = new Point(x,y-1);
			if(!prev.equals(next)) {
				while(true) {
					stack.add(new Point(x,y));
					if(y <= map.length && map[y+1][x] == 1) y++;
					else break;
				}
			}
			next = new Point(x+1,y);
			if(!prev.equals(next)) {
				while(true) {
					stack.add(new Point(x,y));
					if(y <= map.length && map[y+1][x] == 1) y++;
					else break;
				}
			}
			next = new Point(x-1,y);
			if(!prev.equals(next)) {
				while(true) {
					stack.add(new Point(x,y));
					if(y <= map.length && map[y+1][x] == 1) y++;
					else break;
				}
			}
			
		}
		
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] input = br.readLine().split(" ");
		int n = Integer.parseInt(input[0]);
		int m = Integer.parseInt(input[1]);
		byte[][] map = new byte[n][m];
		int[][] distance = new int[n][m];
		boolean[][] visited = new boolean[n][m];
		n--;
		m--;
		for(int i = 0; i < map.length; i++) {
			String line = br.readLine();
			for(int j = 0; j < map[i].length; j++) {
				map[i][j] = (byte)(line.charAt(j)-'0');
			}
		}
		br.close();
	}
}